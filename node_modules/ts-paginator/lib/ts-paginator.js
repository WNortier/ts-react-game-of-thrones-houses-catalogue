"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var useTsPaginator = function (totalRecordCountProp, currentPageProp, rowsPerPageProp) {
    if (rowsPerPageProp === void 0) { rowsPerPageProp = 10; }
    var _a = react_1.default.useState(totalRecordCountProp), totalRecordCount = _a[0], setTotalRecordCount = _a[1];
    var _b = react_1.default.useState(rowsPerPageProp), rowsPerPage = _b[0], setRowsPerPage = _b[1];
    var _c = react_1.default.useState(currentPageProp), currentPage = _c[0], setCurrentPage = _c[1];
    react_1.default.useEffect(function () {
        _determineRowsPerPageOptions();
        _determinePaginationMessage();
        _determinePaginationDisabledState();
        _determinePaginationPages();
    }, [totalRecordCount]);
    react_1.default.useEffect(function () {
        _determinePaginationMessage();
        _determinePaginationDisabledState();
        _determinePaginationPages();
    }, [rowsPerPage]);
    // determine count works out how many pages there are
    function determinePageCount(trc, rpp) {
        var calculateCount = trc / rpp;
        var hasRemainder = trc % rpp;
        var count = calculateCount;
        if (hasRemainder) {
            count = Number(count.toString().split('.')[0]) + 1;
        }
        return count;
    }
    // returns an array consisting of the rows pre page options
    function _determineRowsPerPageOptions() {
        var rowsPerPageOption = [];
        if (totalRecordCount < 10)
            rowsPerPageOption.push(10);
        else if (totalRecordCount % 10 > 0 || totalRecordCount % 10 === 0) {
            if (totalRecordCount >= 10 && totalRecordCount <= 100)
                rowsPerPageOption.push(10, 25, 50);
            else if (totalRecordCount >= 100 && totalRecordCount <= 500)
                rowsPerPageOption.push(10, 25, 50, 100);
            else if (totalRecordCount >= 500 && totalRecordCount <= 10000000)
                rowsPerPageOption.push(10, 25, 50, 100, 250, 500);
            else
                rowsPerPageOption.push(10, 20, 30);
        }
        return rowsPerPageOption;
    }
    function determinePaginationStartingPoint() {
        var startingPoint;
        startingPoint = rowsPerPage * currentPage + 1;
        return startingPoint;
    }
    function determinePaginationEndPoint() {
        var endPoint;
        var startingPoint = determinePaginationStartingPoint();
        endPoint = Math.min(startingPoint + rowsPerPage, totalRecordCount) - 1;
        var theCurrentPage = currentPage;
        if (++theCurrentPage === determinePageCount(totalRecordCount, rowsPerPage))
            endPoint = Math.min(startingPoint + rowsPerPage, totalRecordCount);
        return endPoint;
    }
    function _determinePaginationMessage(options) {
        var startingPoint = determinePaginationStartingPoint();
        var endPoint = determinePaginationEndPoint();
        var verb = options ? options.verb : 'Displaying';
        var noun = (options === null || options === void 0 ? void 0 : options.noun) ? options.noun.toLowerCase() : 'records';
        var message = "".concat(verb, " ").concat(startingPoint, " to ").concat(endPoint, " of ").concat(totalRecordCount, " ").concat(noun);
        if (endPoint === -1 && (options === null || options === void 0 ? void 0 : options.hideMessageOnZeroRecords))
            return "";
        else if (endPoint === -1 && !(options === null || options === void 0 ? void 0 : options.hideMessageOnZeroRecords))
            message = "No ".concat(noun, " to ").concat(options && options.verb === 'Showing' ? 'show' : 'display');
        return message;
    }
    // disable the ability to change the page if the records are below 10
    function _determinePaginationDisabledState() {
        var startingPoint;
        var endPoint;
        startingPoint = rowsPerPage * currentPage + 1;
        endPoint = Math.min(startingPoint + rowsPerPage, totalRecordCount) - 1;
        var theCurrentPage = currentPage;
        if (++theCurrentPage === determinePageCount(totalRecordCount, rowsPerPage))
            endPoint = Math.min(startingPoint + rowsPerPage, totalRecordCount);
        return determinePageCount(totalRecordCount, rowsPerPage) === 1 && (endPoint === totalRecordCount ? true : false);
    }
    function _determinePaginationPages() {
        var paginationPages = [];
        var pageCount = determinePageCount(totalRecordCount, rowsPerPage);
        switch (pageCount) {
            case 0:
            case 1: {
                paginationPages = [1];
                break;
            }
            case 2: {
                paginationPages = [1, 2];
                break;
            }
            case 3: {
                paginationPages = [1, 2, 3];
                break;
            }
            case 4: {
                paginationPages = [1, 2, 3, 4];
                break;
            }
            case 5: {
                paginationPages = [1, 2, 3, 4, 5];
                break;
            }
            case 6: {
                paginationPages = [1, 2, 3, 4, 5, 6];
                break;
            }
            case 7: {
                paginationPages = [1, 2, 3, 4, 5, 6, 7];
                break;
            }
            default: {
                var page = currentPage + 1;
                var isFirstFourOrLastFourPages = ([1, 2, 3, 4].includes(page) || [pageCount, pageCount - 1, pageCount - 2, pageCount - 3, pageCount - 4].includes(page));
                var pageOne = page === 1;
                var pageTwoOrThree = (page === 2 || page === 3);
                var pageFour = (page === 4);
                //
                var lastPage = page === pageCount;
                var secondOrThirdLastPage = (page === pageCount - 1 || page === pageCount - 2);
                var fourthLastPage = (page === pageCount - 3);
                if (isFirstFourOrLastFourPages) {
                    if (pageOne)
                        paginationPages = [1, 2, 3, 4, 5, 0, pageCount];
                    else if (pageTwoOrThree)
                        paginationPages = [1, 2, 3, 4, 5, 0, pageCount];
                    else if (pageFour)
                        paginationPages = [1, 2, 3, 4, 5, 6, 0, pageCount];
                    else if (lastPage) {
                        paginationPages = [1, 0, pageCount - 4, pageCount - 3, pageCount - 2, pageCount - 1, pageCount];
                    }
                    else if (secondOrThirdLastPage)
                        paginationPages = [1, 0, pageCount - 4, pageCount - 3, pageCount - 2, pageCount - 1, pageCount];
                    else if (fourthLastPage)
                        paginationPages = [1, 0, pageCount - 5, pageCount - 4, pageCount - 3, pageCount - 2, pageCount - 1, pageCount];
                }
                else
                    paginationPages = [
                        1,
                        0,
                        currentPage - 1,
                        currentPage,
                        currentPage + 1,
                        currentPage + 2,
                        currentPage + 3,
                        0,
                        pageCount,
                    ];
                break;
            }
        }
        return paginationPages;
    }
    function _handleChangeTotalRecordCount(newTotalRecordCount) {
        setTotalRecordCount(newTotalRecordCount);
        setCurrentPage(0);
        setRowsPerPage(10);
    }
    function _handleChangePage(newPage) {
        setCurrentPage(newPage - 1);
    }
    function _handleChangeRowsPerPage(newRowsPerPage) {
        setRowsPerPage(newRowsPerPage);
        setCurrentPage(0);
    }
    return {
        totalRecordCount: totalRecordCount,
        currentPage: currentPage,
        rowsPerPage: rowsPerPage,
        //
        _determinePaginationMessage: _determinePaginationMessage,
        _determineRowsPerPageOptions: _determineRowsPerPageOptions,
        _determinePaginationPages: _determinePaginationPages,
        _determinePaginationDisabledState: _determinePaginationDisabledState,
        //
        _handleChangeTotalRecordCount: _handleChangeTotalRecordCount,
        _handleChangePage: _handleChangePage,
        _handleChangeRowsPerPage: _handleChangeRowsPerPage,
    };
};
exports.default = useTsPaginator;
module.exports = useTsPaginator;
