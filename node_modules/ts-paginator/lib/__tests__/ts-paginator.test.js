"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts_paginator_1 = __importDefault(require("../ts-paginator"));
var react_1 = require("@testing-library/react");
describe('ts-paginator', function () {
    describe('ts-paginator with 0 records', function () {
        var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(0, 0); }).result;
        var _a = result.current, totalRecordCount = _a.totalRecordCount, rowsPerPage = _a.rowsPerPage, currentPage = _a.currentPage, _determinePaginationMessage = _a._determinePaginationMessage, _determinePaginationPages = _a._determinePaginationPages;
        test('It should initialize correctly with 0 records', function () {
            expect(totalRecordCount).toBe(0);
            expect(rowsPerPage).toBe(10);
            expect(currentPage).toBe(0);
        });
        test('It should calc the pagination pages with 0 records', function () {
            expect(_determinePaginationPages()).toEqual([1]);
        });
        test('It should calc the pagination message with 0 records', function () {
            expect(_determinePaginationMessage()).toBe('No records to display');
        });
    });
    describe('ts-paginator with less than 10 records', function () {
        var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(7, 0); }).result;
        var _a = result.current, totalRecordCount = _a.totalRecordCount, rowsPerPage = _a.rowsPerPage, currentPage = _a.currentPage, _determinePaginationMessage = _a._determinePaginationMessage, _determinePaginationDisabledState = _a._determinePaginationDisabledState, _determinePaginationPages = _a._determinePaginationPages;
        test('It should initialize correctly with 21 records', function () {
            expect(totalRecordCount).toBe(7);
            expect(rowsPerPage).toBe(10);
            expect(currentPage).toBe(0);
        });
        test('It should calc the pagination message', function () {
            expect(_determinePaginationMessage()).toBe('Displaying 1 to 7 of 7 records');
        });
        test('It should calc the disabled state as true since there are less than 10 records', function () {
            expect(_determinePaginationDisabledState()).toBe(true);
        });
        test('It should calc the pagination pages', function () {
            expect(_determinePaginationPages()).toEqual([1]);
        });
    });
    describe('ts-paginator with 21 records', function () {
        var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(21, 0); }).result;
        var _a = result.current, totalRecordCount = _a.totalRecordCount, rowsPerPage = _a.rowsPerPage, currentPage = _a.currentPage, _determinePaginationMessage = _a._determinePaginationMessage, _determineRowsPerPageOptions = _a._determineRowsPerPageOptions, _determinePaginationPages = _a._determinePaginationPages, _determinePaginationDisabledState = _a._determinePaginationDisabledState;
        test('It should initialize correctly with 21 records', function () {
            expect(totalRecordCount).toBe(21);
            expect(rowsPerPage).toBe(10);
            expect(currentPage).toBe(0);
        });
        test('It should calc the pagination message', function () {
            expect(_determinePaginationMessage()).toBe('Displaying 1 to 10 of 21 records');
        });
        test('It should calc the options for the rows per page', function () {
            expect(_determineRowsPerPageOptions()).toEqual([10, 25, 50]);
        });
        test('It should calc the disabled state', function () {
            expect(_determinePaginationDisabledState()).toBe(false);
        });
        test('It should calc the pagination pages', function () {
            expect(_determinePaginationPages()).toEqual([1, 2, 3]);
        });
    });
    describe('ts-paginator with 351 records', function () {
        var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(351, 5); }).result;
        var _a = result.current, totalRecordCount = _a.totalRecordCount, rowsPerPage = _a.rowsPerPage, currentPage = _a.currentPage, _determinePaginationMessage = _a._determinePaginationMessage, _determineRowsPerPageOptions = _a._determineRowsPerPageOptions, _determinePaginationPages = _a._determinePaginationPages, _determinePaginationDisabledState = _a._determinePaginationDisabledState;
        test('It should initialize correctly with 21 records', function () {
            expect(totalRecordCount).toBe(351);
            expect(rowsPerPage).toBe(10);
            expect(currentPage).toBe(5);
        });
        test('It should calc the pagination message', function () {
            expect(_determinePaginationMessage()).toBe('Displaying 51 to 60 of 351 records');
        });
        test('It should calc the options for the rows per page', function () {
            expect(_determineRowsPerPageOptions()).toEqual([10, 25, 50, 100]);
        });
        test('It should calc the disabled state', function () {
            expect(_determinePaginationDisabledState()).toBe(false);
        });
        test('It should calc the pagination pages', function () {
            expect(_determinePaginationPages()).toEqual([1, 0, 4, 5, 6, 7, 8, 0, 36]);
        });
    });
    describe('test determinePaginationPages with less than 70 records', function () {
        test('It should calc the pagination pages when totalRecordCount is 10 and currentPage is 0', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(10, 0); }).result;
            var _determinePaginationPages = result.current._determinePaginationPages;
            expect(_determinePaginationPages()).toEqual([1]);
        });
        test('It should calc the pagination pages when totalRecordCount is 60 and currentPage is 0', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(60, 0); }).result;
            var _determinePaginationPages = result.current._determinePaginationPages;
            expect(_determinePaginationPages()).toEqual([1, 2, 3, 4, 5, 6]);
        });
        test('It should calc the pagination pages when totalRecordCount is 70 and currentPage is 0', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(70, 0); }).result;
            var _determinePaginationPages = result.current._determinePaginationPages;
            expect(_determinePaginationPages()).toEqual([1, 2, 3, 4, 5, 6, 7]);
        });
    });
    describe('test determinePaginationPages with 900 records', function () {
        test('It should calc the pagination pages when totalRecordCount is 900 and currentPage is 1', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(900, 1); }).result;
            var _determinePaginationPages = result.current._determinePaginationPages;
            expect(_determinePaginationPages()).toEqual([1, 2, 3, 4, 5, 0, 90]);
        });
        test('It should calc the pagination pages when totalRecordCount is 900 and currentPage is 3', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(900, 3); }).result;
            var _determinePaginationPages = result.current._determinePaginationPages;
            expect(_determinePaginationPages()).toEqual([1, 2, 3, 4, 5, 6, 0, 90]);
        });
        test('It should calc the pagination pages when totalRecordCount is 900 and currentPage is 4', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(900, 4); }).result;
            var _determinePaginationPages = result.current._determinePaginationPages;
            expect(_determinePaginationPages()).toEqual([1, 0, 3, 4, 5, 6, 7, 0, 90]);
        });
    });
    describe('test determinePaginationMessage using the options parameter', function () {
        test('It should calc the pagination message with 0 records', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(0, 0); }).result;
            var _determinePaginationMessage = result.current._determinePaginationMessage;
            expect(_determinePaginationMessage()).toBe('No records to display');
            expect(_determinePaginationMessage({ verb: 'Showing' })).toBe('No records to show');
        });
        test('It should hide the pagination message with 0 records when the hideMessageOnZeroRecords option is defined', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(0, 0); }).result;
            var _determinePaginationMessage = result.current._determinePaginationMessage;
            expect(_determinePaginationMessage({ verb: 'Displaying', hideMessageOnZeroRecords: true })).toBe('');
        });
        test('It should calc the pagination message with 1 record', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(1, 0); }).result;
            var _determinePaginationMessage = result.current._determinePaginationMessage;
            expect(_determinePaginationMessage({ verb: 'Displaying', hideMessageOnZeroRecords: false, noun: 'cars' })).toBe('Displaying 1 to 1 of 1 cars');
        });
        test('It should calc the pagination message with 1001 records when the alternative verb (Showing) option is defined', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(1001, 0); }).result;
            var _determinePaginationMessage = result.current._determinePaginationMessage;
            expect(_determinePaginationMessage({ verb: 'Showing' })).toBe('Showing 1 to 10 of 1001 records');
        });
        test('It should calc the pagination message with 1000000 records starting from page 6 with a custom noun defined', function () {
            var result = (0, react_1.renderHook)(function () { return (0, ts_paginator_1.default)(1000000, 5, 10); }).result;
            var _determinePaginationMessage = result.current._determinePaginationMessage;
            expect(_determinePaginationMessage({ verb: 'Showing', hideMessageOnZeroRecords: false, noun: 'eNtRies' })).toBe('Showing 51 to 60 of 1000000 entries');
        });
    });
});
